desc "Install vim configuration files"
task :install do
  begin
  vim_configuration
  rescue Interrupt
  ensure exiting unless exiting?
  end
end

desc "Restore previous configuration"
task :restore do
  puts "restoring the backup is not implemented yet"
end

task :default => :install
task :vim_install => :install

def backup_path
  @backup_path ||= File.join home, '.devconf', 'vim', 'backup', time
end

FILES = {:dir=>'files', :content=>{'vim/'=>'.vim/', 'vimrc'=>'.vimrc'}}

def vim_configuration
  @time = Time.now.strftime "%Y-%m-%d-%H.%M"

  out
  out "This script is going to put followin vim configuration files or directories"
  out "in to your home folder: #{colorize files[:content].values.join(', ')}"
  out
  out "Your home folder seems to be at #{colorize home} ."
  out
  out "If files or folders with the same name already exist, backup is going to be created at"
  out "#{colorize backup_path}"
  out
  out "If this is ok, confirm with 'yes'."
  out "For exiting confirm with 'exit'."
  out
  out "Your answer is: ", :print=>true

  input = STDIN.gets.strip

  case input
  when "yes"  then default_installation
  when "exit" then exiting
  else out "Unknown option '#{input}'."
  end
end

def time ; @time end

def out text = '', options={:print=>false}
  if options[:print]
    Kernel.print "  #{text}"
  else
    Kernel.puts  "  #{text}"
  end
end

def colorize text, color=:cyan
  case color
  when :cyan then "\e[1;35;40m#{text}\e[0m"
  else
    "\e[1;30;40m#{text}\e[0m"
  end
end

def home
  return @home if @home
  require 'etc'
  @home = Etc.getpwuid.dir
end

def files
  FILES
end

def create_backup conf_item
  # create the backup dir
  FileUtils.mkdir_p backup_path
  # copy existing configuration
  out "Creating backup of the #{conf_item[:target_type]}"
  FileUtils.cp_r conf_item[:target_path], backup_path
  # delete existing configuration
  FileUtils.rm_rf conf_item[:target_path]
  out "#{conf_item[:target_type].capitalize} deleted"
end


def apply_new_config new_conf
  source =  File.join Dir.pwd, new_conf[:conf_dir], new_conf[:name]
  destination = new_conf[:target_path]
  out "Creating new content"
  FileUtils.cp_r source, destination
  out "#{new_conf[:conf_type].capitalize} updated"
end

def default_installation
  out "Checking existing configuration files.."
  config = {}
  files[:content].each do |item,current|
    path = File.join files[:dir], item
    config[item] = {
      :conf_dir=>files[:dir],
      :conf_type=> (File.exists?(path) ? File::Stat.new(path).ftype : nil),
      :target_dir=>home,
      :target_name=>current,
      :target_path=> File.join(home,current)
    }
    config[item].merge! check_target config[item].merge :name=>current
    if File.exists? File.join(files[:dir], item)
      out
      out "Now in #{config[item][:target_type]} #{config[item][:target_path]}"
      create_backup config[item] if config[item][:target_exists]
      apply_new_config config[item].merge(:name=>item)
    else
      out
      out "Item '#{item}' does not exists in the configuration. Skipping.."
    end
  end
end

def check_target opts={}
  file_name = opts[:name]
  exists, type = nil
  Dir.chdir opts[:target_dir] do
    exists = File.exists? file_name
    type = ( exists ? File::Stat.new(file_name).ftype : nil )
  end
  {:target_exists=>exists,:target_type=>type}
end

def alternate_installation 
  out "Enter the prefered path for vim config files (or Ctrl+C to exit): ", :print=>true
  input = STDIN.gets
end

def exiting
  @exiting = true
  out
  out "Exiting now.."
  # exit 0
end

def exiting?
  @exiting
end
