desc "Install vim configuration files"
task :install do
  begin
  vim_configuration
  rescue Interrupt
  ensure exiting unless exiting?
  end
end

task :restore do
  puts "restoring the backup"
  #TODO arguments or choices to restore
end

task :default => :install

def vim_configuration
  vim  = "vim"
  time = Time.now.strftime "%Y-%m-%d-%H:%M"

  puts ""
  puts "  This script is going to put vim configuration files in to your home folder."
  puts ""
  puts "  Your home folder seems to be at #{home_path}"
  puts ""
  puts "  If files or folders with the same name already exist, backup is going to be created at"
  puts "  #{home_path}/.dev-config/#{vim}/#{time}-backup"
  puts "  If this is ok, confirm with 'yes'."
  puts "  If you prefer any different installation path, confirm with 'no'."
  puts "  For exiting confirm with 'exit'."
  puts ""
  print "  Your answer is: "

  input = gets.strip
  case input
  when "yes" then default_installation
  when "no" then alternate_installation
  when "exit" then exiting
  else
    puts "  Unknown option '#{input}'."
  end
end

def files
  path = File.join Dir.pwd, 'files'
  Dir.entries path
end


def home_path
  require 'etc'
  home_dir = Etc.getpwuid.dir
  # for testing purposes create a different destination
  # Dir.mkdir home_dir + 'test'
  # http://ruby.runpaint.org/files
end

def check_file_existence
  files.each do |f|
    case type = File::Stat.new(f).ftype
    when 'file' then puts 'something'
    end
  end
end

def default_installation
  installation_path = '/home/vlad/test/home'
  files.each do |file|
    FileTest.directory
    FileUtils.cp_r file, installation_path
  end
end

def alternate_installation 
  print "  Enter the prefered path for vim config files (or Ctrl+C to exit): "
  input = gets
end

def exiting
  @exiting = true
  puts "  Exiting now .."
  exit 0
end

def exiting?
  @exiting
end
