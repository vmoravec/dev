desc "Install vim configuration files"
task :install do
  begin
  vim_configuration
  rescue Interrupt
  ensure exiting unless exiting?
  end
end

desc "Restore previous configuration"
task :restore do
  puts "restoring the backup is not implemented yet"
end

task :default => :install
task :vim_install => :install

def vim_configuration
  @vim  = "vim"
  @time = Time.now.strftime "%Y-%m-%d-%H:%M"

  out
  out "This script is going to put vim configuration files in to your home folder."
  out
  out "Your home folder seems to be at #{colorize home}"
  out
  out "If files or folders with the same name already exist, backup is going to be created at"
  out "#{colorize backup_path}"
  out
  out "If this is ok, confirm with 'yes'."
  out "If you prefer any different installation path, confirm with 'no'."
  out "For exiting confirm with 'exit'."
  out
  out "Your answer is: ", :print=>true

  input = STDIN.gets.strip

  case input
  when "yes"  then default_installation
  when "no"   then alternate_installation
  when "exit" then exiting
  else out "Unknown option '#{input}'."
  end
end

def time ; @time end
def vim  ; @vim  end

def out text = '', options={:print=>false}
  if options[:print]
    Kernel.print "  #{text}"
  else
    Kernel.puts  "  #{text}"
  end
end

def colorize text, color=:cyan
  case color
  when :cyan then "\e[1;35;40m#{text}\e[0m"
  else
    "\e[1;30;40m#{text}\e[0m"
  end
end

def files
  FILES
end

def home
  return @home if @home
  require 'etc'
  @home = Etc.getpwuid.dir
end


def backup_path
  @backup_path ||= File.join home, '.devconf', vim, 'backup', time
end

FILES = {:path=>'files', :content=>{'vim'=>'.vim', 'vimrc'=>'.vimrc', 'test'=>'.test'}}

def check_current_configuration
  out 'Checking existing configuration files..'
end

def create_backup original;           end
def apply_new_configuration file ; end

def default_installation
  details = Hash.new {|hash,key| hash[key] = {:source=>nil, :original=>nil}}
  files[:content].each do |source,original|
    details[source][:source]   = check :source=>source
    details[source][:original] = check :original=>original
    if details[source][:original][:exists]
      create_backup details[source][:original]
    else
      apply_new_configuration details[source]
    end
  end
end

def check opts={}
  file_name = opts[opts.keys.first]
  exists, type, full_path = nil

  case opts.keys.first
  when :original then path = home
  when :source   then path = files[:path]
  end

  Dir.chdir path do
    exists = File.exists? file_name
    type = ( exists ? File::Stat.new(file_name).ftype : nil )
    full_path = File.join( Dir.pwd, file_name ) if exists
  end
  {:exists=>exists,:type=>type,:path=>full_path}
end

 #files[:content].each_pair do |conf,real|
 #  check_file_in_path real
 #  #type = File::Stat.new(file).ftype.upcase
 #  #puts type
 #  #puts "#{type} #{File.join home, file_name} exists?  #{File.exists?(File.join home, file_name)}"
 #  #FileUtils.cp_r file, installation_path
 #end

def alternate_installation 
  out "Enter the prefered path for vim config files (or Ctrl+C to exit): ", :print=>true
  input = STDIN.gets
end

def exiting
  @exiting = true
  out "Exiting now.."
  # exit 0
end

def exiting?
  @exiting
end
